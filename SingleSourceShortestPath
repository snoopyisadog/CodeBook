#include<cstdio>
#include<utility>
#include<cstring>
#include<queue>
#include<algorithm>
#include<vector>
using namespace std;
#define mp make_pair
#define pb push_back
const int MAXN = 10004;
int n,m;
int d[MAXN],inq[MAXN];

void SPFA(){
    vector<pair<int,int> > g[10004];
    memset(d,0x3f,sizeof(d));
    memset(inq,0,sizeof(inq));
    d[0]= 0;
    int s,t;
    queue<int> que;
    que.push(1);
    while(!que.empty()){
        s = que.front();
        que.pop();
        inq[s] = 0;
        for(i=0;i<g[s].size();i++){
            t = g[s][i].first;
            c = g[s][i].second;
            if(d[s]+c < d[t]){
                if(!inq[t]){
                    que.push(t);
                    inq[t] = 1;
                }
                d[t] = d[s]+c;
            }
        }
    }
}
typedef struct A{
    int t,c;
    A(){}
    A(int _t, int _c){
        t = _t, c = _c;
    }
    bool operator < (const A  &a) const{
        if(a.c<c) return 1;
        else if(a.c>c) return 0;
        return a.t<t;
    }
}AA;
void dijk(){
    vector<pair<int,int> > g[MAXN];
    memset(d,0x3f,sizeof(d));
    priority_queue <AA> pq;
    AA cur(start,0);
    pq.push(cur);
    int s,t;
    while(!pq.empty()){
        cur = pq.top(); pq.pop();
        s = cur.t;
        if(cur.c<d[s]){// update
            d[s] = cur.c;
            for(i=0;i<g[s].size();i++){
                t = g[s][i].first;
                c = g[s][i].second;
                cur.t = t;
                cur.c = d[s] + c;
                pq.push(cur);
            }
        }
    }
}
